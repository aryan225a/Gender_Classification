# -*- coding: utf-8 -*-
"""Gender_Classification_train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qMrc_NjiyuX1sf87BIhlWg9rd-pXklt5
"""

import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sns
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization, GlobalAveragePooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.applications import MobileNetV2

"""### Unzipping Data"""

#!unzip /content/drive/MyDrive/Comsys_Hackathon5.zip

"""### Data Preparing"""

# Paths to the datasets
train_dir = '/content/Comys_Hackathon5/Task_A/train'
val_dir = '/content/Comys_Hackathon5/Task_A/val'

# Data Generators

train_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    horizontal_flip=True,
    vertical_flip=True,
    zoom_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
)

val_gen = ImageDataGenerator(rescale=1./255)

# load data

train_data = train_gen.flow_from_directory(
    train_dir,
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'binary'
)

val_data = val_gen.flow_from_directory(
    val_dir,
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'binary'
)

print(train_data.class_indices)
print(val_data.class_indices)

"""### Defining model"""

base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# freeze base initially
for layer in base_model.layers:
    layer.trainable = False

"""### Preparing Model"""

# Adding classification layer
model = Sequential()
model.add(base_model)
model.add(GlobalAveragePooling2D())
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

# Compile
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

"""### Training Model"""

#model training

callbacks = [
    EarlyStopping(patience=3, restore_best_weights=True),
    ModelCheckpoint("mobilenet_best.h5", save_best_only=True)
]

history = model.fit( train_data, validation_data=val_data, epochs=10, callbacks=callbacks)

# Unfreeze and fine-tune

for layer in base_model.layers:
    layer.trainable = True

# Compile
model.compile(optimizer=keras.optimizers.Adam(1e-5), loss='binary_crossentropy', metrics=['accuracy'])

fine_tuned_history = model.fit(train_data, validation_data=val_data, epochs=10, callbacks=callbacks)

# 7. Plot Accuracy
plt.plot(history.history['val_accuracy'], label='Initial Val Acc')
plt.plot(fine_tuned_history.history['val_accuracy'], label='Fine-tuned Val Acc')
plt.legend()
plt.title("Validation Accuracy Over Epochs")
plt.show()

"""### Testing"""

import os
import shutil
import random

def create_test_split(source_dir, test_dir, split_ratio=0.15):
    os.makedirs(test_dir, exist_ok=True)
    for class_name in ['male', 'female']:
        src_class = os.path.join(source_dir, class_name)
        dst_class = os.path.join(test_dir, class_name)
        os.makedirs(dst_class, exist_ok=True)

        images = os.listdir(src_class)
        sample_size = int(len(images) * split_ratio)
        test_images = random.sample(images, sample_size)

        for img in test_images:
            shutil.move(os.path.join(src_class, img), os.path.join(dst_class, img))

create_test_split('/content/Comsys_Hackathon5/Task_A/train', '/content/Comsys_Hackathon5/Task_A/test')

test_gen = ImageDataGenerator(rescale=1./255)

test_dir = '/content/Comsys_Hackathon5/Task_A/test'

test_load = test_gen.flow_from_directory(
      test_dir,
      target_size=(224, 224),
      batch_size=32,
      class_mode='binary',
      shuffle=False
 )

# Load best model
model = tf.keras.models.load_model("mobilenet_best.h5")
preds = model.predict(test_load)
y_pred = (preds > 0.5).astype(int).flatten()
y_true = test_load.classes

acc = accuracy_score(y_true, y_pred)
prec = precision_score(y_true, y_pred)
rec = recall_score(y_true, y_pred)
f1 = f1_score(y_true, y_pred)

print("Evaluation Metrics:")
print(f"Accuracy : {acc:.4f}")
print(f"Precision: {prec:.4f}")
print(f"Recall   : {rec:.4f}")
print(f"F1-Score : {f1:.4f}")

"""### For single image"""

# Load and preprocess a single image
img_path = '/content/WIN_20250415_13_12_24_Pro.jpg'  # example path
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0  # normalize
img_array = np.expand_dims(img_array, axis=0)  # batch dimension

# Predict
model = tf.keras.models.load_model("mobilenet_best.h5")
pred = model.predict(img_array)[0][0]
label = 'Male' if pred > 0.5 else 'Female'
confidence = pred if pred > 0.5 else 1 - pred

# Visualisation
plt.figure(figsize=(4, 4))
plt.imshow(img)
plt.title(f"Prediction: {label} ({confidence*100:.2f}%)")
plt.axis('off')
plt.show()